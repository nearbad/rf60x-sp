# -*- coding: utf-8 -*-
import serial
import csv
import datetime
import time

def main():
    print("RF60x Parallel Data Logger")
    print("=" * 50)
    print("–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û —Å RF60x-SP")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω –º–æ—Å—Ç (serial_bridge.py)")
    print("=" * 50)
    
    # –ü–æ—Ä—Ç –¥–ª—è –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π)
    PORT = "COM5"
    BAUDRATE = 9600
    FILENAME = f"rf60x_parallel_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    
    try:
        print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {PORT}...")
        ser = serial.Serial(PORT, BAUDRATE, timeout=1)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ!")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        with open(FILENAME, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Timestamp', 'DateTime', 'Measurement', 'RawData'])
        
        print(f"üìÑ –§–∞–π–ª: {FILENAME}")
        print("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞—Ç... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
        print("-" * 50)
        
        count = 0
        
        while True:
            if ser.in_waiting > 0:
                data = ser.readline()
                
                try:
                    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
                    text = data.decode('ascii').strip()
                    cleaned = ''.join(c for c in text if c.isdigit() or c in '.-')
                    
                    if cleaned:
                        measurement = float(cleaned)
                        timestamp = time.time()
                        dt_string = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        
                        # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
                        with open(FILENAME, 'a', newline='', encoding='utf-8') as f:
                            writer = csv.writer(f)
                            writer.writerow([timestamp, dt_string, measurement, data.hex()])
                        
                        count += 1
                        if count % 10 == 0:
                            print(f"üìä –°–æ–±—Ä–∞–Ω–æ: {count} –∏–∑–º–µ—Ä–µ–Ω–∏–π")
                            
                except Exception as e:
                    print(f"üì¶ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {data.hex()}")
                    
            time.sleep(0.01)
            
    except serial.SerialException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ serial_bridge.py —Å–Ω–∞—á–∞–ª–∞")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç –Ω–µ –∑–∞–Ω—è—Ç")
        
    except KeyboardInterrupt:
        print(f"\n‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ: {count} –∏–∑–º–µ—Ä–µ–Ω–∏–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        if 'ser' in locals() and ser.is_open:
            ser.close()
            print("üîå –ü–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    main()