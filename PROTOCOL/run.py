# -*- coding: utf-8 -*-
import serial
import serial.tools.list_ports
import csv
import datetime
import time
import struct

class RF60xReader:
    def __init__(self, sensor_range_mm=250):
        self.ser = None
        self.sensor_range_mm = sensor_range_mm  # –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç—á–∏–∫–∞ –≤ –º–º
        
    def connect(self, port='COM3', baudrate=921600):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–∞—Ç—á–∏–∫—É RF60x"""
        try:
            self.ser = serial.Serial(
                port=port,
                baudrate=baudrate,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE,
                timeout=1
            )
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {port} –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ {baudrate}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def send_command(self, command_code, address=1):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–∞—Ç—á–∏–∫—É –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É RF60x"""
        try:
            # –§–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: [ADR(7:0), 1|0|0|0|COD(3:0)]
            # –ë–∞–π—Ç 0: –∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—Å—Ç–∞—Ä—à–∏–π –±–∏—Ç = 0)
            # –ë–∞–π—Ç 1: —Å—Ç–∞—Ä—à–∏–π –±–∏—Ç = 1, –∑–∞—Ç–µ–º 000, –∑–∞—Ç–µ–º –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã
            inc0 = address & 0x7F  # –ê–¥—Ä–µ—Å (–±–∏—Ç 7 –≤—Å–µ–≥–¥–∞ 0)
            inc1 = 0x80 | (command_code & 0x0F)  # –°—Ç–∞—Ä—à–∏–π –±–∏—Ç = 1, –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã
            
            cmd_bytes = bytes([inc0, inc1])
            print(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {cmd_bytes.hex()} (–∫–æ–¥: {command_code:02X}h)")
            
            self.ser.write(cmd_bytes)
            self.ser.flush()
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return False
    
    def parse_rf60x_response(self, data):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –¥–∞—Ç—á–∏–∫–∞ RF60x"""
        if len(data) < 4:
            return None
            
        try:
            # –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: 4 –±–∞–π—Ç–∞ –Ω–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
            # –ö–∞–∂–¥—ã–π –±–∞–π—Ç –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç: 1, SB, CNT[1:0], DATA[3:0]
            bytes_list = list(data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –±–∞–π—Ç—ã –∏–º–µ—é—Ç —Å—Ç–∞—Ä—à–∏–π –±–∏—Ç = 1
            if not all(b & 0x80 for b in bytes_list[:4]):
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –±–∞–π—Ç–∞ (–º–ª–∞–¥—à–∏–µ 4 –±–∏—Ç–∞)
            d0 = bytes_list[0] & 0x0F  # –ú–ª–∞–¥—à–∞—è —Ç–µ—Ç—Ä–∞–¥–∞ –º–ª–∞–¥—à–µ–≥–æ –±–∞–π—Ç–∞
            d1 = bytes_list[1] & 0x0F  # –°—Ç–∞—Ä—à–∞—è —Ç–µ—Ç—Ä–∞–¥–∞ –º–ª–∞–¥—à–µ–≥–æ –±–∞–π—Ç–∞  
            d2 = bytes_list[2] & 0x0F  # –ú–ª–∞–¥—à–∞—è —Ç–µ—Ç—Ä–∞–¥–∞ —Å—Ç–∞—Ä—à–µ–≥–æ –±–∞–π—Ç–∞
            d3 = bytes_list[3] & 0x0F  # –°—Ç–∞—Ä—à–∞—è —Ç–µ—Ç—Ä–∞–¥–∞ —Å—Ç–∞—Ä—à–µ–≥–æ –±–∞–π—Ç–∞
            
            # –°–æ–±–∏—Ä–∞–µ–º 16-–±–∏—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            low_byte = (d1 << 4) | d0
            high_byte = (d3 << 4) | d2
            raw_value = (high_byte << 8) | low_byte
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä—ã –ø–æ —Ñ–æ—Ä–º—É–ª–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            # X = D * S / 4000h (–≥–¥–µ 4000h = 16384)
            measurement = raw_value * self.sensor_range_mm / 16384.0
            
            return measurement
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def start_stream(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∫–æ–º–∞–Ω–¥–∞ 07h)"""
        return self.send_command(0x07)
    
    def stop_stream(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∫–æ–º–∞–Ω–¥–∞ 08h)"""
        return self.send_command(0x08)
    
    def single_measurement(self):
        """–û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ (–∫–æ–º–∞–Ω–¥–∞ 06h)"""
        return self.send_command(0x06)
    
    def read_data_stream(self, filename):
        """–ß—Ç–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥–∞—Ç—á–∏–∫–∞"""
        print("üì° –ù–∞—á–∞–ª–æ —á—Ç–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        count = 0
        
        # –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Timestamp', 'DateTime', 'Measurement_mm', 'RawData_Hex'])
        
        buffer = b''
        last_print_time = time.time()
        
        try:
            while True:
                if self.ser.in_waiting > 0:
                    # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    data = self.ser.read(self.ser.in_waiting)
                    buffer += data
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –ø–æ 4 –±–∞–π—Ç–∞
                    while len(buffer) >= 4:
                        packet = buffer[:4]
                        buffer = buffer[4:]
                        
                        measurement = self.parse_rf60x_response(packet)
                        timestamp = time.time()
                        dt_string = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
                        
                        if measurement is not None:
                            # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
                            with open(filename, 'a', newline='', encoding='utf-8') as f:
                                writer = csv.writer(f)
                                writer.writerow([timestamp, dt_string, f"{measurement:.3f}", packet.hex()])
                            
                            count += 1
                            
                            # –í—ã–≤–æ–¥ –∫–∞–∂–¥—ã–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏–ª–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                            if count % 10 == 0 or time.time() - last_print_time >= 1:
                                print(f"üìä #{count}: {measurement:.3f} mm")
                                last_print_time = time.time()
                        else:
                            # –í—ã–≤–æ–¥ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            if time.time() - last_print_time >= 2:
                                print(f"üì¶ –ù–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {packet.hex()}")
                                last_print_time = time.time()
                
                time.sleep(0.001)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
                
        except KeyboardInterrupt:
            print(f"\n‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {count} –∏–∑–º–µ—Ä–µ–Ω–∏–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.ser and self.ser.is_open:
            self.ser.close()
            print("üîå –ü–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç")

def select_com_port():
    """–í—ã–±–æ—Ä COM-–ø–æ—Ä—Ç–∞"""
    print("–ü–æ–∏—Å–∫ COM-–ø–æ—Ä—Ç–æ–≤...")
    ports = serial.tools.list_ports.comports()
    
    if not ports:
        print("COM-–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return None
    
    print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã:")
    for i, port in enumerate(ports):
        print(f"{i+1}. {port.device} - {port.description}")
    
    try:
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞: ")
        port_index = int(choice) - 1
        selected_port = ports[port_index].device
        return selected_port
    except:
        selected_port = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä COM3): ")
        return selected_port

def main():
    print("RF60x Data Logger - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª")
    print("=" * 60)
    
    # –í—ã–±–æ—Ä –ø–æ—Ä—Ç–∞
    port = select_com_port()
    if not port:
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—Ç—á–∏–∫–∞
    try:
        sensor_range = float(input("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç—á–∏–∫–∞ –≤ –º–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 250): ") or "250")
    except:
        sensor_range = 250
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {sensor_range} –º–º")
    
    reader = RF60xReader(sensor_range_mm=sensor_range)
    
    if reader.connect(port, 921600):
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        time.sleep(1)
        
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
        reader.ser.reset_input_buffer()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö
        if reader.start_stream():
            print("‚úÖ –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω")
            
            # –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ
            filename = f"rf60x_data_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            print(f"üíæ –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: {filename}")
            print("üéØ –ù–∞–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—á–∏–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏–π")
            print("‚èπ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            print("-" * 60)
            
            reader.read_data_stream(filename)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            reader.stop_stream()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
    
    reader.close()

if __name__ == "__main__":
    main()