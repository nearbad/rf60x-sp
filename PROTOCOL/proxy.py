# -*- coding: utf-8 -*-
import serial
import serial.tools.list_ports
import csv
import datetime
import time
import struct
import threading

class RF60xDataProxy:
    def __init__(self, sensor_range_mm=250):
        self.sensor_range_mm = sensor_range_mm
        self.ser_sensor = None  # –î–ª—è –¥–∞—Ç—á–∏–∫–∞ (COM4)
        self.ser_rf60x_sp = None  # –î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã RF60x-SP (COM3)
        self.running = False
        self.data_count = 0
        
    def connect_sensor(self, port='COM4', baudrate=921600):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–∞—Ç—á–∏–∫—É –Ω–∞ COM4"""
        try:
            self.ser_sensor = serial.Serial(
                port=port,
                baudrate=baudrate,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE,
                timeout=1
            )
            print(f"‚úÖ –î–∞—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ {port}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¥–∞—Ç—á–∏–∫—É: {e}")
            return False
    
    def connect_rf60x_sp(self, port='COM3', baudrate=921600):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ RF60x-SP –Ω–∞ COM3"""
        try:
            self.ser_rf60x_sp = serial.Serial(
                port=port,
                baudrate=baudrate,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE,
                timeout=1
            )
            print(f"‚úÖ RF60x-SP –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ {port}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RF60x-SP: {e}")
            return False
    
    def send_command_to_sensor(self, command_code, address=1):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–∞—Ç—á–∏–∫—É"""
        try:
            inc0 = address & 0x7F
            inc1 = 0x80 | (command_code & 0x0F)
            
            cmd_bytes = bytes([inc0, inc1])
            print(f"üîÑ –ö–æ–º–∞–Ω–¥–∞ –¥–∞—Ç—á–∏–∫—É: {cmd_bytes.hex()} (–∫–æ–¥: {command_code:02X}h)")
            
            self.ser_sensor.write(cmd_bytes)
            self.ser_sensor.flush()
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return False
    
    def parse_rf60x_data(self, data):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥–∞—Ç—á–∏–∫–∞"""
        if len(data) < 4:
            return None
            
        try:
            bytes_list = list(data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–∞–∫–µ—Ç–∞ (—Å—Ç–∞—Ä—à–∏–π –±–∏—Ç = 1)
            if not all(b & 0x80 for b in bytes_list[:4]):
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            d0 = bytes_list[0] & 0x0F
            d1 = bytes_list[1] & 0x0F  
            d2 = bytes_list[2] & 0x0F
            d3 = bytes_list[3] & 0x0F
            
            # –°–æ–±–∏—Ä–∞–µ–º 16-–±–∏—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            low_byte = (d1 << 4) | d0
            high_byte = (d3 << 4) | d2
            raw_value = (high_byte << 8) | low_byte
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä—ã
            measurement = raw_value * self.sensor_range_mm / 16384.0
            
            return measurement
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return None
    
    def forward_to_rf60x_sp(self, data):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ RF60x-SP"""
        try:
            if self.ser_rf60x_sp and self.ser_rf60x_sp.is_open:
                self.ser_rf60x_sp.write(data)
                return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ RF60x-SP: {e}")
        return False
    
    def start_data_stream(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–∞"""
        return self.send_command_to_sensor(0x07)
    
    def stop_data_stream(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        return self.send_command_to_sensor(0x08)
    
    def run_proxy(self, csv_filename):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–∫—Å–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏...")
        print(f"üì° COM4 ‚Üí üìä CSV + üì° COM3")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
        with open(csv_filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Timestamp', 'DateTime', 'Measurement_mm', 'RawData_Hex'])
        
        buffer = b''
        self.running = True
        last_print_time = time.time()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö
            if not self.start_data_stream():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            print("‚úÖ –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω")
            print("‚èπ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            print("-" * 60)
            
            while self.running:
                if self.ser_sensor.in_waiting > 0:
                    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞
                    data = self.ser_sensor.read(self.ser_sensor.in_waiting)
                    
                    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ RF60x-SP
                    self.forward_to_rf60x_sp(data)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª—è CSV
                    buffer += data
                    
                    # –ü–∞—Ä—Å–∏–º –ø–æ–ª–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –ø–æ 4 –±–∞–π—Ç–∞
                    while len(buffer) >= 4:
                        packet = buffer[:4]
                        buffer = buffer[4:]
                        
                        measurement = self.parse_rf60x_data(packet)
                        timestamp = time.time()
                        dt_string = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
                        
                        if measurement is not None:
                            # –ó–∞–ø–∏—Å—å –≤ CSV
                            with open(csv_filename, 'a', newline='', encoding='utf-8') as f:
                                writer = csv.writer(f)
                                writer.writerow([timestamp, dt_string, f"{measurement:.3f}", packet.hex()])
                            
                            self.data_count += 1
                            
                            # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                            if self.data_count % 10 == 0 or time.time() - last_print_time >= 1:
                                print(f"üìä #{self.data_count}: {measurement:.3f} mm")
                                last_print_time = time.time()
                        else:
                            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                            if time.time() - last_print_time >= 2:
                                print(f"üì¶ –ù–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {packet.hex()}")
                                last_print_time = time.time()
                
                time.sleep(0.001)
                
        except KeyboardInterrupt:
            print(f"\n‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            self.running = False
            self.stop_data_stream()
            print(f"üíæ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {self.data_count}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        self.running = False
        
        if self.ser_sensor and self.ser_sensor.is_open:
            self.ser_sensor.close()
            print("üîå –ü–æ—Ä—Ç –¥–∞—Ç—á–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç")
        
        if self.ser_rf60x_sp and self.ser_rf60x_sp.is_open:
            self.ser_rf60x_sp.close()
            print("üîå –ü–æ—Ä—Ç RF60x-SP –∑–∞–∫—Ä—ã—Ç")

def select_com_port(prompt, default_port):
    """–í—ã–±–æ—Ä COM-–ø–æ—Ä—Ç–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
    print(f"\n{prompt}")
    ports = serial.tools.list_ports.comports()
    
    if not ports:
        print("COM-–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return default_port
    
    print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã:")
    for i, port in enumerate(ports):
        print(f"  {i+1}. {port.device} - {port.description}")
    
    try:
        choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ (Enter –¥–ª—è {default_port}): ").strip()
        if choice:
            port_index = int(choice) - 1
            selected_port = ports[port_index].device
            return selected_port
    except:
        pass
    
    return default_port

def main():
    print("RF60x Data Proxy - COM4 ‚Üí CSV + COM3")
    print("=" * 60)
    
    # –í—ã–±–æ—Ä –ø–æ—Ä—Ç–æ–≤
    sensor_port = select_com_port("–í—ã–±–æ—Ä –ø–æ—Ä—Ç–∞ –î–ê–¢–ß–ò–ö–ê:", "COM4")
    rf60x_sp_port = select_com_port("–í—ã–±–æ—Ä –ø–æ—Ä—Ç–∞ –¥–ª—è RF60x-SP:", "COM3")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—Ç—á–∏–∫–∞
    try:
        sensor_range = float(input("–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç—á–∏–∫–∞ –≤ –º–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 250): ") or "250")
    except:
        sensor_range = 250
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω: {sensor_range} –º–º")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
    proxy = RF60xDataProxy(sensor_range_mm=sensor_range)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–∞—Ç—á–∏–∫—É
        if not proxy.connect_sensor(sensor_port, 921600):
            return
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RF60x-SP
        if not proxy.connect_rf60x_sp(rf60x_sp_port, 921600):
            proxy.close()
            return
        
        # –ü–∞—É–∑–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(1)
        proxy.ser_sensor.reset_input_buffer()
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏
        filename = f"rf60x_proxy_data_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        print(f"\nüíæ –§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏: {filename}")
        
        proxy.run_proxy(filename)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        proxy.close()

if __name__ == "__main__":
    main()