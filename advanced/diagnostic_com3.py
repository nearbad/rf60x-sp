# -*- coding: utf-8 -*-
import serial
import time
import serial.tools.list_ports

def diagnostic_check():
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ COM3 –ø–æ—Ä—Ç–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    ports = list(serial.tools.list_ports.comports())
    print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã:")
    for port in ports:
        print(f"  {port.device} - {port.description}")
        if 'COM3' in port.device:
            print(f"    ‚úÖ COM3 –Ω–∞–π–¥–µ–Ω: {port.description}")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ COM3
        print("\n–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ COM3...")
        ser = serial.Serial(
            port='COM3',
            baudrate=921600,
            bytesize=serial.EIGHTBITS,
            parity=serial.PARITY_NONE,
            stopbits=serial.STOPBITS_ONE,
            timeout=2
        )
        
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ COM3")
        print("üì° –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥...")
        
        start_time = time.time()
        data_received = False
        
        while time.time() - start_time < 10:
            if ser.in_waiting > 0:
                data = ser.read(ser.in_waiting)
                print(f"üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data.hex()} (hex)")
                try:
                    text = data.decode('ascii')
                    print(f"      –∫–∞–∫ —Ç–µ–∫—Å—Ç: '{text}'")
                except:
                    print(f"      –Ω–µ ASCII —Ç–µ–∫—Å—Ç")
                data_received = True
            
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
            if time.time() - start_time > 3 and not data_received:
                print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã...")
                # –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∞
                test_commands = [b'\r\n', b'?', b'READ', b'MEAS', b'\x01']
                for cmd in test_commands:
                    try:
                        ser.write(cmd)
                        print(f"  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {cmd.hex()}")
                        time.sleep(0.5)
                    except:
                        pass
            
            time.sleep(0.1)
        
        if not data_received:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   1. –î–∞—Ç—á–∏–∫ –Ω–µ –≤–∫–ª—é—á–µ–Ω")
            print("   2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ 19200, 38400, 115200)")
            print("   3. –î–∞—Ç—á–∏–∫ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
            print("   4. –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–∞–±–µ–ª–µ–º/–¥—Ä–∞–π–≤–µ—Ä–æ–º")
        else:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        if 'ser' in locals() and ser.is_open:
            ser.close()
            print("üîå –ü–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    diagnostic_check()
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")