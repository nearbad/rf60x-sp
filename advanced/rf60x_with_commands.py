# -*- coding: utf-8 -*-
import serial
import serial.tools.list_ports
import csv
import datetime
import time

class RF60xController:
    def __init__(self):
        self.ser = None
        
    def connect(self, port, baudrate=9600):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—Ä—Ç—É"""
        try:
            self.ser = serial.Serial(
                port=port,
                baudrate=baudrate,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE,
                timeout=1
            )
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {port}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def try_commands(self):
        """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–∞—Ç—á–∏–∫–∞"""
        commands = [
            b'\r\n',           # –ü—Ä–æ—Å—Ç–æ Enter
            b'?',              # –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
            b'READ\r\n',       # –ö–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è
            b'MEAS\r\n',       # –ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            b'START\r\n',      # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
            b'DATA\r\n',       # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
            b'\x01',           # –°–∏–º–≤–æ–ª SOH (Start of Header)
            b'\x02',           # –°–∏–º–≤–æ–ª STX (Start of Text)
        ]
        
        print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–∞—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥–∞–º–∏...")
        for i, cmd in enumerate(commands):
            try:
                print(f"  –ö–æ–º–∞–Ω–¥–∞ {i+1}: {cmd} (hex: {cmd.hex()})")
                self.ser.write(cmd)
                self.ser.flush()
                time.sleep(0.5)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
                if self.ser.in_waiting > 0:
                    response = self.ser.read(self.ser.in_waiting)
                    print(f"    ‚úÖ –û—Ç–≤–µ—Ç: {response.hex()}")
                    try:
                        text = response.decode('ascii').strip()
                        if text:
                            print(f"       –∫–∞–∫ —Ç–µ–∫—Å—Ç: '{text}'")
                    except:
                        pass
                    return True
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        return False
    
    def continuous_read(self, filename):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        print("üì° –ù–∞—á–∞–ª–æ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è...")
        count = 0
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Timestamp', 'DateTime', 'Measurement', 'RawData'])
        
        try:
            while True:
                if self.ser.in_waiting > 0:
                    data = self.ser.readline()
                    
                    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
                    measurement = self.parse_data(data)
                    if measurement is not None:
                        timestamp = time.time()
                        dt_string = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        
                        # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
                        with open(filename, 'a', newline='', encoding='utf-8') as f:
                            writer = csv.writer(f)
                            writer.writerow([timestamp, dt_string, measurement, data.hex()])
                        
                        count += 1
                        print(f"üìä #{count}: {measurement} (—Å—ã—Ä—ã–µ: {data.hex()})")
                    else:
                        print(f"üì¶ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {data.hex()}")
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–≤—è–∑–∏
                if count % 20 == 0 and count > 0:
                    self.ser.write(b'\r\n')
                
                time.sleep(0.01)
                
        except KeyboardInterrupt:
            print(f"\n‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {count} –∏–∑–º–µ—Ä–µ–Ω–∏–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
    
    def parse_data(self, data):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞—Ç—á–∏–∫–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º ASCII
            text = data.decode('ascii').strip()
            cleaned = ''.join(c for c in text if c.isdigit() or c in '.-')
            if cleaned:
                return float(cleaned)
        except:
            pass
        
        # –ü—Ä–æ–±—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        try:
            if len(data) >= 4:
                import struct
                # –ü–æ–ø—Ä–æ–±—É–µ–º float (4 –±–∞–π—Ç–∞)
                value = struct.unpack('<f', data[:4])[0]  # little-endian
                if abs(value) < 10000:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏–π
                    return value
        except:
            pass
        
        return None

def main():
    print("RF60x Data Logger with Commands")
    print("=" * 50)
    
    # –ü–æ–∏—Å–∫ –ø–æ—Ä—Ç–æ–≤
    ports = list(serial.tools.list_ports.comports())
    if not ports:
        print("COM-–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã:")
    for i, port in enumerate(ports):
        print(f"{i+1}. {port.device} - {port.description}")
    
    # –í—ã–±–æ—Ä –ø–æ—Ä—Ç–∞
    try:
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞: ")
        port_index = int(choice) - 1
        selected_port = ports[port_index].device
    except:
        selected_port = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç (COM3): ").strip()
    
    # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
    baudrates = [921600, 19200, 38400, 57600, 115200]
    controller = RF60xController()
    
    for baudrate in baudrates:
        print(f"\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ {baudrate}...")
        if controller.connect(selected_port, baudrate):
            time.sleep(1)  # –î–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
            if controller.try_commands():
                filename = f"rf60x_data_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
                print(f"üéØ –î–∞—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –≤ {filename}")
                controller.continuous_read(filename)
                break
            else:
                print(f"‚ùå –î–∞—Ç—á–∏–∫ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ {baudrate}")
                controller.ser.close()
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ {baudrate}")
    
    if controller.ser and controller.ser.is_open:
        controller.ser.close()
        print("üîå –ü–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    main()