# -*- coding: utf-8 -*-
import serial
import serial.tools.list_ports
import csv
import datetime
import time
import sys

def check_port_availability(port_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
    try:
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ timeout
        ser = serial.Serial(port_name, timeout=0.1)
        ser.close()
        return True
    except:
        return False

def wait_for_port(port_name, max_attempts=10):
    """–û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞"""
    print(f"–û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ {port_name}...")
    for attempt in range(max_attempts):
        if check_port_availability(port_name):
            print(f"‚úÖ –ü–æ—Ä—Ç {port_name} –¥–æ—Å—Ç—É–ø–µ–Ω!")
            return True
        print(f"  –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}...")
        time.sleep(1)
    return False

def main():
    print("RF60x Improved Data Logger")
    print("=" * 50)
    
    # –ü–æ–∏—Å–∫ –ø–æ—Ä—Ç–æ–≤
    print("–ü–æ–∏—Å–∫ COM-–ø–æ—Ä—Ç–æ–≤...")
    ports = list(serial.tools.list_ports.comports())
    
    if not ports:
        print("COM-–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã:")
    for i, port in enumerate(ports):
        print(f"{i+1}. {port.device} - {port.description}")
    
    # –í—ã–±–æ—Ä –ø–æ—Ä—Ç–∞
    try:
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞: ")
        port_index = int(choice) - 1
        selected_port = ports[port_index].device
    except:
        selected_port = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞ (COM3): ").strip()
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞
    if not wait_for_port(selected_port):
        print(f"‚ùå –ü–æ—Ä—Ç {selected_port} –∑–∞–Ω—è—Ç! –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    baudrate = 9600
    filename = f"rf60x_data_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    
    print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"  –ü–æ—Ä—Ç: {selected_port}")
    print(f"  –°–∫–æ—Ä–æ—Å—Ç—å: {baudrate}")
    print(f"  –§–∞–π–ª: {filename}")
    print("  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("-" * 50)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—Ä—Ç—É...")
        ser = serial.Serial(
            port=selected_port,
            baudrate=baudrate,
            bytesize=serial.EIGHTBITS,
            parity=serial.PARITY_NONE,
            stopbits=serial.STOPBITS_ONE,
            timeout=1
        )
        
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Timestamp', 'DateTime', 'Measurement', 'RawData'])
        
        print("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞—Ç...")
        count = 0
        
        while True:
            if ser.in_waiting > 0:
                data = ser.readline()
                
                try:
                    # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
                    text = data.decode('ascii').strip()
                    cleaned = ''.join(c for c in text if c.isdigit() or c in '.-')
                    
                    if cleaned:
                        measurement = float(cleaned)
                        timestamp = time.time()
                        dt_string = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        
                        # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
                        with open(filename, 'a', newline='', encoding='utf-8') as f:
                            writer = csv.writer(f)
                            writer.writerow([timestamp, dt_string, measurement, data.hex()])
                        
                        count += 1
                        if count % 10 == 0:
                            print(f"–°–æ–±—Ä–∞–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {count}")
                            
                except Exception as e:
                    print(f"–ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data.hex()}")
                    
            time.sleep(0.01)
            
    except serial.SerialException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π")
        print("2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç–∞")
        print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å –¥—Ä–∞–π–≤–µ—Ä–æ–º")
        print("\n–†–µ—à–µ–Ω–∏–µ:")
        print("- –ó–∞–∫—Ä–æ–π—Ç–µ RF60x-SP, Putty –∏ –¥—Ä—É–≥–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        print("- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥—Ä–∞–π–≤–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        
    except KeyboardInterrupt:
        print(f"\n‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {count} –∏–∑–º–µ—Ä–µ–Ω–∏–π")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if 'ser' in locals() and ser.is_open:
            ser.close()
            print("üîå –ü–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    main()