# -*- coding: utf-8 -*-
import serial
import csv
import datetime
import time
import struct

class RF60xReader:
    def __init__(self):
        self.ser = None
        
    def connect(self, port='COM3', baudrate=921600):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ RF60x-SP"""
        try:
            self.ser = serial.Serial(
                port=port,
                baudrate=baudrate,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE,
                timeout=1
            )
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {port} –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ {baudrate}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def send_start_command(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã Start (–∫–∞–∫ –≤ RF60x-SP)"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã Start
            commands = [
                b'Start\r\n',      # –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
                b'START\r\n',      # –í –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
                b'\x01',           # –ë–∏–Ω–∞—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                b'\x02',           # –î—Ä—É–≥–∞—è –±–∏–Ω–∞—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            ]
            
            for cmd in commands:
                print(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {cmd} (hex: {cmd.hex()})")
                self.ser.write(cmd)
                self.ser.flush()
                time.sleep(0.5)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
                if self.ser.in_waiting > 0:
                    response = self.ser.read(self.ser.in_waiting)
                    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.hex()}")
                    return True
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (–≤–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–µ –∏–¥—É—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
            print("‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —á—Ç–µ–Ω–∏–µ...")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return False
    
    def parse_rf60x_data(self, data):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö RF60x –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            # –í–∞—Ä–∏–∞–Ω—Ç 1: ASCII –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "123.45")
            text = data.decode('ascii').strip()
            cleaned = ''.join(c for c in text if c.isdigit() or c in '.-')
            if cleaned:
                return float(cleaned)
        except:
            pass
        
        try:
            # –í–∞—Ä–∏–∞–Ω—Ç 2: 4-–±–∞–π—Ç–æ–≤—ã–π float (little-endian)
            if len(data) >= 4:
                value = struct.unpack('<f', data[:4])[0]  # little-endian float
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã (0-250mm –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º)
                if 0 <= value <= 300:
                    return value
        except:
            pass
        
        try:
            # –í–∞—Ä–∏–∞–Ω—Ç 3: 4-–±–∞–π—Ç–æ–≤—ã–π float (big-endian)
            if len(data) >= 4:
                value = struct.unpack('>f', data[:4])[0]  # big-endian float
                if 0 <= value <= 300:
                    return value
        except:
            pass
        
        return None
    
    def continuous_read(self, filename):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        print("üì° –ù–∞—á–∞–ª–æ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        count = 0
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Timestamp', 'DateTime', 'Measurement_mm', 'RawData'])
        
        last_print_time = time.time()
        
        try:
            while True:
                if self.ser.in_waiting > 0:
                    # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    data = self.ser.read(self.ser.in_waiting)
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏/—Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–∞–∫–µ—Ç–∞–º–∏)
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
                    for separator in [b'\r\n', b'\n', b'\r']:
                        if separator in data:
                            messages = data.split(separator)
                            break
                    else:
                        messages = [data]  # –µ—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –≤–µ—Å—å –±–ª–æ–∫
                    
                    for msg in messages:
                        if len(msg) > 0:
                            measurement = self.parse_rf60x_data(msg)
                            timestamp = time.time()
                            dt_string = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
                            
                            if measurement is not None:
                                # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
                                with open(filename, 'a', newline='', encoding='utf-8') as f:
                                    writer = csv.writer(f)
                                    writer.writerow([timestamp, dt_string, measurement, msg.hex()])
                                
                                count += 1
                                
                                # –í—ã–≤–æ–¥ –∫–∞–∂–¥—ã–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏–ª–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                                if count % 10 == 0 or time.time() - last_print_time >= 1:
                                    print(f"üìä #{count}: {measurement:.3f} mm (—Å—ã—Ä—ã–µ: {msg.hex()})")
                                    last_print_time = time.time()
                            else:
                                # –í—ã–≤–æ–¥ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                                if time.time() - last_print_time >= 2:  # –ß—Ç–æ–±—ã –Ω–µ –∑–∞—Å–ø–∞–º–∏—Ç—å
                                    print(f"üì¶ –ù–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {msg.hex()}")
                                    last_print_time = time.time()
                
                time.sleep(0.001)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
                
        except KeyboardInterrupt:
            print(f"\n‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {count} –∏–∑–º–µ—Ä–µ–Ω–∏–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.ser and self.ser.is_open:
            self.ser.close()
            print("üîå –ü–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç")

def main():
    print("RF60x Data Logger - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("=" * 60)
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ RF60x-SP:")
    print("  –ü–æ—Ä—Ç: COM3")
    print("  –°–∫–æ—Ä–æ—Å—Ç—å: 921600")
    print("  –ê–¥—Ä–µ—Å: 1")
    print("  –ë–∞–∑–æ–≤–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: 80 mm")
    print("  –î–∏–∞–ø–∞–∑–æ–Ω: 250 mm")
    print("=" * 60)
    
    reader = RF60xReader()
    
    if reader.connect('COM3', 921600):
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        time.sleep(1)
        
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
        reader.ser.reset_input_buffer()
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É Start
        reader.send_start_command()
        
        # –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ
        filename = f"rf60x_data_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        print(f"üíæ –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: {filename}")
        print("üéØ –ù–∞–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—á–∏–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏–π")
        print("‚èπ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("-" * 60)
        
        reader.continuous_read(filename)
    
    reader.close()

if __name__ == "__main__":
    main()