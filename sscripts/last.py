# -*- coding: utf-8 -*-
import serial
import csv
import datetime
import time
import struct
import binascii

class RF60xBinaryReader:
    def __init__(self):
        self.ser = None
        
    def connect(self, port='COM3', baudrate=921600):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–∞—Ç—á–∏–∫—É"""
        try:
            self.ser = serial.Serial(
                port=port,
                baudrate=baudrate,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE,
                timeout=1
            )
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {port} –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ {baudrate}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def send_binary_command(self, command_bytes):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –±–∏–Ω–∞—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        try:
            print(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {command_bytes.hex()}")
            self.ser.write(command_bytes)
            self.ser.flush()
            time.sleep(0.1)
            
            # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
            if self.ser.in_waiting > 0:
                response = self.ser.read(self.ser.in_waiting)
                print(f"   üì® –û—Ç–≤–µ—Ç: {response.hex()}")
                return response
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return None
    
    def parse_measurement_data(self, data):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ RF60x"""
        if len(data) < 4:
            return None
            
        try:
            # RF60x –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 4-–±–∞–π—Ç–æ–≤—ã–π float –≤ little-endian
            measurement = struct.unpack('<f', data[:4])[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã (0-300mm –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º)
            if 0 <= measurement <= 300:
                return measurement
                
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –ø—Ä–æ–±—É–µ–º big-endian
            measurement = struct.unpack('>f', data[:4])[0]
            if 0 <= measurement <= 300:
                return measurement
                
        except:
            pass
            
        return None
    
    def start_continuous_measurement(self):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
        # –ë–∏–Ω–∞—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è RF60x (–º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—à–∏–≤–∫–∏)
        commands = [
            b'\x01',  # –°—Ç–∞—Ä—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–π
            b'\x02',  # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º
            b'\x53',  # 'S' - Start
            b'\x4D',  # 'M' - Measure
            b'\x52',  # 'R' - Read
        ]
        
        for cmd in commands:
            response = self.send_binary_command(cmd)
            if response and len(response) >= 4:
                measurement = self.parse_measurement_data(response)
                if measurement is not None:
                    print(f"üéØ –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {measurement:.3f} mm")
                    return True
                    
        return False
    
    def read_continuous_data(self, filename):
        """–ß—Ç–µ–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üì° –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        count = 0
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Timestamp', 'DateTime', 'Measurement_mm', 'RawData', 'DataLength'])
        
        last_data_time = time.time()
        data_timeout = 5  # –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        try:
            while True:
                if self.ser.in_waiting > 0:
                    # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    data = self.ser.read(self.ser.in_waiting)
                    last_data_time = time.time()
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –¥–ª–∏–Ω—ã –ø–∞–∫–µ—Ç–æ–≤
                    packet_sizes = [4, 8, 16, 32]
                    
                    for size in packet_sizes:
                        if len(data) >= size:
                            # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–µ size –±–∞–π—Ç –∫–∞–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
                            for i in range(0, len(data) - size + 1, size):
                                packet = data[i:i+size]
                                measurement = self.parse_measurement_data(packet)
                                
                                if measurement is not None:
                                    timestamp = time.time()
                                    dt_string = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
                                    
                                    # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
                                    with open(filename, 'a', newline='', encoding='utf-8') as f:
                                        writer = csv.writer(f)
                                        writer.writerow([timestamp, dt_string, measurement, packet.hex(), len(packet)])
                                    
                                    count += 1
                                    print(f"üìä #{count}: {measurement:.3f} mm (–ø–∞–∫–µ—Ç {len(packet)} –±–∞–π—Ç)")
                                    break
                            
                            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
                            if count > 0:
                                break
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π, –≤—ã–≤–æ–¥–∏–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    if count == 0:
                        print(f"üì¶ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ ({len(data)} –±–∞–π—Ç): {data.hex()}")
                        
                        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
                        try:
                            text = data.decode('ascii', errors='ignore').strip()
                            if text:
                                print(f"   –ö–∞–∫ —Ç–µ–∫—Å—Ç: '{text}'")
                        except:
                            pass
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
                if time.time() - last_data_time > data_timeout:
                    print("‚è∞ –¢–∞–π–º–∞—É—Ç, –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç. –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É...")
                    self.start_continuous_measurement()
                    last_data_time = time.time()
                
                time.sleep(0.01)
                
        except KeyboardInterrupt:
            print(f"\n‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {count} –∏–∑–º–µ—Ä–µ–Ω–∏–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
    
    def close(self):
        if self.ser and self.ser.is_open:
            self.ser.close()
            print("üîå –ü–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç")

def main():
    print("RF60x Binary Protocol Reader")
    print("=" * 50)
    
    reader = RF60xBinaryReader()
    
    if reader.connect('COM3', 921600):
        time.sleep(1)
        reader.ser.reset_input_buffer()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è
        if reader.start_continuous_measurement():
            filename = f"rf60x_binary_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            print(f"üíæ –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: {filename}")
            print("üéØ –ù–∞–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—á–∏–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç")
            print("‚èπ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            print("-" * 50)
            
            reader.read_continuous_data(filename)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è")
            print("üîç –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –ø–æ—Ä—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥...")
            filename = f"rf60x_listen_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            reader.read_continuous_data(filename)
    
    reader.close()

if __name__ == "__main__":
    main()